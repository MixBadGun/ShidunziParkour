//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Action/XinputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @XinputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XinputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XinputControls"",
    ""maps"": [
        {
            ""name"": ""Xinput"",
            ""id"": ""0f60e938-4fd0-4df7-b609-9d9ac12258c3"",
            ""actions"": [
                {
                    ""name"": ""HorizonMove"",
                    ""type"": ""Value"",
                    ""id"": ""f3ec8ab9-ecbe-403b-a114-bf541452787d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""VerticalMove"",
                    ""type"": ""Value"",
                    ""id"": ""622daeda-f4b2-4ae1-942f-33f7cf3af2c2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""24d4fd77-0d91-4dfc-afb5-561120ca5c42"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizonMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c08e2cf6-4d05-44fc-ae20-d68fd53b34b1"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New Control Scheme"",
            ""bindingGroup"": ""New Control Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Xinput
        m_Xinput = asset.FindActionMap("Xinput", throwIfNotFound: true);
        m_Xinput_HorizonMove = m_Xinput.FindAction("HorizonMove", throwIfNotFound: true);
        m_Xinput_VerticalMove = m_Xinput.FindAction("VerticalMove", throwIfNotFound: true);
    }

    ~@XinputControls()
    {
        UnityEngine.Debug.Assert(!m_Xinput.enabled, "This will cause a leak and performance issues, XinputControls.Xinput.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Xinput
    private readonly InputActionMap m_Xinput;
    private List<IXinputActions> m_XinputActionsCallbackInterfaces = new List<IXinputActions>();
    private readonly InputAction m_Xinput_HorizonMove;
    private readonly InputAction m_Xinput_VerticalMove;
    public struct XinputActions
    {
        private @XinputControls m_Wrapper;
        public XinputActions(@XinputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizonMove => m_Wrapper.m_Xinput_HorizonMove;
        public InputAction @VerticalMove => m_Wrapper.m_Xinput_VerticalMove;
        public InputActionMap Get() { return m_Wrapper.m_Xinput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XinputActions set) { return set.Get(); }
        public void AddCallbacks(IXinputActions instance)
        {
            if (instance == null || m_Wrapper.m_XinputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XinputActionsCallbackInterfaces.Add(instance);
            @HorizonMove.started += instance.OnHorizonMove;
            @HorizonMove.performed += instance.OnHorizonMove;
            @HorizonMove.canceled += instance.OnHorizonMove;
            @VerticalMove.started += instance.OnVerticalMove;
            @VerticalMove.performed += instance.OnVerticalMove;
            @VerticalMove.canceled += instance.OnVerticalMove;
        }

        private void UnregisterCallbacks(IXinputActions instance)
        {
            @HorizonMove.started -= instance.OnHorizonMove;
            @HorizonMove.performed -= instance.OnHorizonMove;
            @HorizonMove.canceled -= instance.OnHorizonMove;
            @VerticalMove.started -= instance.OnVerticalMove;
            @VerticalMove.performed -= instance.OnVerticalMove;
            @VerticalMove.canceled -= instance.OnVerticalMove;
        }

        public void RemoveCallbacks(IXinputActions instance)
        {
            if (m_Wrapper.m_XinputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXinputActions instance)
        {
            foreach (var item in m_Wrapper.m_XinputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XinputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XinputActions @Xinput => new XinputActions(this);
    private int m_NewControlSchemeSchemeIndex = -1;
    public InputControlScheme NewControlSchemeScheme
    {
        get
        {
            if (m_NewControlSchemeSchemeIndex == -1) m_NewControlSchemeSchemeIndex = asset.FindControlSchemeIndex("New Control Scheme");
            return asset.controlSchemes[m_NewControlSchemeSchemeIndex];
        }
    }
    public interface IXinputActions
    {
        void OnHorizonMove(InputAction.CallbackContext context);
        void OnVerticalMove(InputAction.CallbackContext context);
    }
}
